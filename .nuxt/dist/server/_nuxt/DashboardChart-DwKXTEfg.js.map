{"version":3,"file":"DashboardChart-DwKXTEfg.js","sources":["../../../../components/DashboardChart.vue"],"sourcesContent":["<template>\n  <div ref=\"chartContainer\" class=\"w-full h-full\">\n    <canvas ref=\"canvas\"></canvas>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables)\n\ninterface Props {\n  data: any\n  type: 'line' | 'bar' | 'doughnut' | 'pie'\n}\n\nconst props = defineProps<Props>()\nconst canvas = ref<HTMLCanvasElement>()\nconst chartContainer = ref<HTMLElement>()\nlet chart: Chart | null = null\n\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      labels: {\n        color: '#D1D5DB'\n      }\n    }\n  },\n  scales: props.type === 'doughnut' || props.type === 'pie' ? {} : {\n    x: {\n      ticks: {\n        color: '#9CA3AF'\n      },\n      grid: {\n        color: '#374151'\n      }\n    },\n    y: {\n      ticks: {\n        color: '#9CA3AF'\n      },\n      grid: {\n        color: '#374151'\n      }\n    }\n  }\n}\n\nonMounted(() => {\n  if (canvas.value) {\n    chart = new Chart(canvas.value, {\n      type: props.type,\n      data: props.data,\n      options: chartOptions\n    })\n  }\n})\n\nonUnmounted(() => {\n  if (chart) {\n    chart.destroy()\n  }\n})\n\nwatch(() => props.data, (newData) => {\n  if (chart) {\n    chart.data = newData\n    chart.update()\n  }\n}, { deep: true })\n</script>"],"names":[],"mappings":";;;;;;;;;;;AASA,UAAM,SAAS,GAAG,aAAa;AAO/B,UAAM,QAAQ;AACC,QAAA;AACf,UAAM,iBAAiB,IAAA;AAGvB,KAAqB;AAAA,MAUnB,QAAQ,MAAM,SAAS,cAAc,MAAM,SAAS,QAAQ,KAAK,CAiBjE;AAAA,IAAA;AAmBF,UAAM,MAAM,MAAM,MAAM,CAAC,YAAY;AAAA,IAKrC,GAAG,EAAE,MAAM,MAAM;;;iBAvEN;AAAA,QAAJ,KAAI;AAAA,QAAiB,OAAM;AAAA,MAAA;;;;;;;;;;"}